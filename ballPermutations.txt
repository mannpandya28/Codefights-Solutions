int ballPermutations(int N, int M, int K) {
//java
  /*
   * dp[n][m][k][last] - number of desired permutations for n, m, k balls
   * of given colors, (last == 1) means that the last ball is blue,
   * otherwise (last == 0).
   */
  final int MOD = (int)1e9 + 7;
  int[][][][] dp = new int[N + 1][M + 1][K + 1][2];
  dp[0][0][0][0] = 1;

  for (int cnt = 0; cnt < N + M + K; cnt++) {
    for (int n = 0; n <= Math.min(N, cnt); n++) {
      for (int m = 0; m <= Math.min(M, cnt - n); m++) {
        int k = cnt - n - m;
        if (k > K) {
          continue;
        }
        if (n < N) {
          int tmp = dp[n][m][k][1] % MOD;
          dp[n + 1][m][k][0] = (dp[n][m][k][0] + tmp) % MOD;
        }
        if (m < M) {
          dp[n][m + 1][k][1] = dp[n][m + 1][k][1] + dp[n][m][k][0];
          dp[n][m + 1][k][1] %= MOD;
        }
        if (k < K) {
          int tmp = (dp[n][m][k][0] + dp[n][m][k][1]) % MOD;
          dp[n][m][k + 1][0] = (dp[n][m][k + 1][0] + tmp) % MOD;
        }
      }
    }
  }

  return (dp[N][M][K][0] + dp[N][M][K][1]) % MOD;
}
